from typing import *
from game.game_structures import Card
from tree.sequence import Sequence


class InfosetInfo:
    def __init__(self, info_id: int, name: str, parent_seq: Sequence, actions: List):
        self.info_id = info_id
        # compact description generated by GameState.gen_infoset_name
        self.name = name
        # action performed by the parent to come here
        self.parent_sequence = parent_seq
        # actions performable by each node in the infoset
        self.actions = actions

    def __eq__(self, other):
        return self.info_id == other.info_id

    def __lt__(self, other):
        return self.info_id < other.info_id

    def __str__(self):
        s = "Infoset " + str(self.info_id) + " - name: " + self.name + ", parent sequence: " + str(self.parent_sequence) + ", actions: "
        for a in self.actions:
            s += "/" + str(a)
        return s

    def get_first_action(self):
        return self.actions[0]

    def get_last_action(self):
        return self.actions[ len(self.actions) - 1 ]
